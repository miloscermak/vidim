import streamlit as st
import requests
import base64
import os
from dotenv import load_dotenv
from PIL import Image
from PIL.ExifTags import TAGS
import exifread
from datetime import datetime
from pillow_heif import register_heif_opener
import io

# Naƒçten√≠ promƒõnn√Ωch prost≈ôed√≠
load_dotenv()

# Z√≠sk√°n√≠ API kl√≠ƒçe buƒè z .env nebo ze Streamlit secrets
API_KEY = st.secrets["ANTHROPIC_API_KEY"] if "ANTHROPIC_API_KEY" in st.secrets else os.getenv("ANTHROPIC_API_KEY")
if not API_KEY:
    st.error("Nen√≠ nastaven API kl√≠ƒç pro Anthropic Claude")
    st.stop()

API_URL = "https://api.anthropic.com/v1/messages"

# Registrace HEIF/HEIC handleru
register_heif_opener()

# Konfigurace str√°nky
st.set_page_config(
    page_title="Analyz√°tor j√≠dla",
    layout="centered"
)

# Nadpis
st.title("Co vid√≠m?")

# Upload souboru
uploaded_file = st.file_uploader("Nahrajte fotografii", type=['jpg', 'jpeg', 'png', 'heic', 'HEIC'])

def get_image_metadata(image_file, file_type=None):
    """Funkce pro z√≠sk√°n√≠ metadat z obr√°zku"""
    metadata = {}
    
    try:
        # Naƒçten√≠ souboru jako bytes
        image_bytes = image_file.read()
        image_file.seek(0)
        
        if file_type == 'image/heic':
            try:
                from pillow_heif import register_heif_opener, HeifImageFile
                register_heif_opener()
                
                heif_image = HeifImageFile(io.BytesIO(image_bytes))
                
                if 'exif' in heif_image.info:
                    from PIL import ExifTags
                    exif_data = heif_image.getexif()
                    
                    if exif_data:
                        for tag_id in exif_data:
                            tag = ExifTags.TAGS.get(tag_id, tag_id)
                            value = exif_data[tag_id]
                            
                            # Zpracov√°n√≠ data
                            if tag == 'DateTime':
                                try:
                                    date_obj = datetime.strptime(str(value), '%Y:%m:%d %H:%M:%S')
                                    metadata['Datum po≈ô√≠zen√≠'] = date_obj.strftime('%d.%m.%Y %H:%M:%S')
                                except Exception as e:
                                    pass
                            
                            # Zpracov√°n√≠ GPS
                            if tag == 'GPSInfo':
                                try:
                                    gps_info = value
                                    lat = [float(x)/float(y) for x, y in gps_info[2]]
                                    lon = [float(x)/float(y) for x, y in gps_info[4]]
                                    
                                    lat = lat[0] + lat[1]/60 + lat[2]/3600
                                    lon = lon[0] + lon[1]/60 + lon[2]/3600
                                    
                                    if gps_info[1] == 'S': lat = -lat
                                    if gps_info[3] == 'W': lon = -lon
                                    
                                    metadata['GPS sou≈ôadnice'] = f"{lat:.6f}, {lon:.6f}"
                                    metadata['Mapa'] = f"https://www.google.com/maps?q={lat},{lon}"
                                except Exception as e:
                                    pass
                            
                            # P≈ôid√°n√≠ informace o za≈ô√≠zen√≠
                            if tag == 'Model':
                                metadata['Za≈ô√≠zen√≠'] = str(value)
                
            except Exception as e:
                st.error(f"Chyba p≈ôi ƒçten√≠ HEIC metadat: {str(e)}")
            
    except Exception as e:
        st.error(f"Chyba p≈ôi ƒçten√≠ metadat: {str(e)}")
    
    return metadata

def convert_to_degrees(value):
    """Pomocn√° funkce pro p≈ôevod GPS sou≈ôadnic"""
    d = float(value.values[0].num) / float(value.values[0].den)
    m = float(value.values[1].num) / float(value.values[1].den)
    s = float(value.values[2].num) / float(value.values[2].den)
    return d + (m / 60.0) + (s / 3600.0)

def process_image(uploaded_file):
    """Funkce pro zpracov√°n√≠ r≈Øzn√Ωch form√°t≈Ø obr√°zk≈Ø"""
    try:
        if uploaded_file.type in ['image/heic', 'image/heif']:
            # Naƒçten√≠ HEIC souboru
            temp_bytes = uploaded_file.getvalue()
            image = Image.open(io.BytesIO(temp_bytes))
        else:
            image = Image.open(uploaded_file)

        # Kontrola a aplikace orientace z EXIF
        try:
            if hasattr(image, '_getexif'):
                exif = image._getexif()
                if exif is not None:
                    orientation = exif.get(274)  # 274 je tag pro orientaci
                    if orientation is not None:
                        # Rotace podle EXIF orientace
                        if orientation == 3:
                            image = image.rotate(180, expand=True)
                        elif orientation == 6:
                            image = image.rotate(270, expand=True)
                        elif orientation == 8:
                            image = image.rotate(90, expand=True)

        except Exception as e:
            st.warning(f"Nelze urƒçit orientaci obr√°zku: {str(e)}")

        # Konverze do JPEG pro dal≈°√≠ zpracov√°n√≠
        with io.BytesIO() as bio:
            # Zachov√°n√≠ EXIF dat p≈ôi ukl√°d√°n√≠
            if 'exif' in image.info:
                image.save(bio, format='JPEG', exif=image.info['exif'])
            else:
                image.save(bio, format='JPEG')
            return bio.getvalue()

    except Exception as e:
        st.error(f"Chyba p≈ôi zpracov√°n√≠ obr√°zku: {str(e)}")
        return None

if uploaded_file is not None:
    try:
        # Zpracov√°n√≠ obr√°zku
        image_data = process_image(uploaded_file)
        
        # Zobrazen√≠ n√°hledu
        image = Image.open(io.BytesIO(image_data))
        st.image(image, caption="N√°hled obr√°zku", use_container_width=True)
        
        # Z√≠sk√°n√≠ metadat
        image_bytes = io.BytesIO(uploaded_file.getvalue())
        metadata = get_image_metadata(image_bytes, uploaded_file.type)
        
        # Zobrazen√≠ metadat - pouze jednou a p≈ôehlednƒõ
        if metadata:
            st.subheader("üì∏ √ödaje o fotografii")
            cols = st.columns(2)
            
            if 'Datum po≈ô√≠zen√≠' in metadata:
                with cols[0]:
                    st.write(f"üìÖ Po≈ô√≠zeno: {metadata['Datum po≈ô√≠zen√≠']}")
            
            if 'Za≈ô√≠zen√≠' in metadata:
                with cols[1]:
                    st.write(f"üì± Za≈ô√≠zen√≠: {metadata['Za≈ô√≠zen√≠']}")
            
            if 'GPS sou≈ôadnice' in metadata:
                st.write(f"üìç Lokace: {metadata['GPS sou≈ôadnice']}")
                st.write(f"üó∫Ô∏è [Zobrazit na mapƒõ]({metadata['Mapa']})")
        
        # Odstran√≠me v≈°echny debugovac√≠ v√Ωpisy
        
        # Tlaƒç√≠tko pro anal√Ωzu
        if st.button("Chci si p≈ôeƒç√≠st popisek"):
            with st.spinner('Prob√≠h√° anal√Ωza...'):
                base64_image = base64.b64encode(image_data).decode("utf-8")
                
                prompt = """Prohl√©dni si pozornƒõ n√°sleduj√≠c√≠ fotografii: <image> {{IMAGE}} </image> Tv√Ωm √∫kolem je identifikovat nejzaj√≠mavƒõj≈°√≠ nebo nejpozoruhodnƒõj≈°√≠ prvek na t√©to fotografii. M≈Ø≈æe to b√Ωt osoba, p≈ôedmƒõt, ud√°lost, detail nebo cokoliv jin√©ho, co tƒõ zaujme jako nejv√≠ce pozoruhodn√©. Pot√© napi≈° kr√°tk√Ω popisek tohoto prvku. Popisek by mƒõl m√≠t n√°sleduj√≠c√≠ vlastnosti: - D√©lka p≈ôibli≈ænƒõ t≈ôi a≈æ ƒçty≈ôi vƒõty - Zamƒõ≈ôen√≠ na to, co ƒçin√≠ tento prvek tak zaj√≠mav√Ωm nebo pozoruhodn√Ωm - Poskytnut√≠ relevantn√≠ch detail≈Ø, kter√© podporuj√≠ tv≈Øj v√Ωbƒõr jako nejzaj√≠mavƒõj≈°√≠ho prvku Pamatuj, ≈æe c√≠lem je naj√≠t a popsat to opravdu nejpozoruhodnƒõj≈°√≠ na cel√© fotografii. Nesna≈æ se popsat celou sc√©nu, ale soust≈ôeƒè se na ten jeden aspekt, kter√Ω nejv√≠ce vynik√° svou zaj√≠mavost√≠ nebo neobvyklost√≠. Sv≈Øj popisek napi≈° v ƒçesk√©m jazyce. Zaƒçni zaj√≠mavƒõ a novin√°≈ôsky, ne fr√°z√≠ typu :"Nejzaj√≠mavƒõj≈°√≠m prvkem na fotce ..." a podobnƒõ. Zaƒçni ƒçtiovƒõ, klidnƒõ i provokativnƒõ. Pi≈° elegantnƒõ a chyt≈ôe.
                """

                try:
                    headers = {
                        "x-api-key": API_KEY,
                        "anthropic-version": "2023-06-01",
                        "content-type": "application/json"
                    }

                    data = {
                        "model": "claude-3-5-sonnet-20241022",
                        "max_tokens": 5000,
                        "messages": [
                            {
                                "role": "user",
                                "content": [
                                    {
                                        "type": "text",
                                        "text": prompt
                                    },
                                    {
                                        "type": "image",
                                        "source": {
                                            "type": "base64",
                                            "media_type": uploaded_file.type if not uploaded_file.type.startswith('image/heic') else "image/jpeg",
                                            "data": base64_image
                                        }
                                    }
                                ]
                            }
                        ]
                    }

                    response = requests.post(API_URL, headers=headers, json=data)
                    
                    if response.status_code == 200:
                        result = response.json()
                        st.success("Anal√Ωza dokonƒçena!")
                        st.write(result['content'][0]['text'])
                    else:
                        st.error(f"Chyba API: {response.status_code} - {response.text}")
                    
                except Exception as e:
                    st.error(f"Do≈°lo k chybƒõ p≈ôi anal√Ωze: {str(e)}")

    except Exception as e:
        st.error(f"Chyba p≈ôi zpracov√°n√≠ obr√°zku: {str(e)}") 
